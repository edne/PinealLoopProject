#!/usr/bin/env python
import os
import re


def read_file(file_name):
    "Read a file"
    with open(file_name) as f:
        return f.read()


def write_file(file_name, content):
    "Write a file"
    with open(file_name, "w") as f:
        f.write(content)


def join_rows(rows):
    "Join rows with a new line"
    return "\n".join(rows)


def join_blocks(blocks):
    "Join rows with 2 new lines"
    return "\n".join(blocks)


def indent(block):
    "Indent a block"
    return "\n".join(["\t{}".format(r) if r else ""
                      for r in block.splitlines()])


def namespace(name, body):
    "Wrap code in a namespace"
    return "namespace {}{{\n{}\n}}".format(name, indent(body))


def scope(ns, name):
    "C++ scope operator"
    return "{}::{}".format(ns, name)


def boost_pydef(py_func, c_func):
    "Boost Python function definition"
    return "py::def(\"{}\", &{});".format(py_func, c_func)


path = os.path.join("_src", "dsl")
files = [f for f in os.listdir(path) if f.endswith(".h")]

modules = []
for m in files:
    name = os.path.splitext(m)[0]
    body = read_file(os.path.join("_src", "dsl", m))

    defines = []
    for x in re.findall("PINEAL\(\"\w+\"\)[\s\w]+\(", body, re.M):
        py_func = x.split("\"")[1]
        c_func = re.split("[\s\(]+", x)[-2]
        defines.append((py_func, c_func))

    modules.append({"name": name, "defines": defines})

modules.sort()

includes = ["#include \"dsl/{}.h\"".format(m["name"])
            for m in modules]

bodies = join_rows(includes)

modules_blocks = [join_rows([boost_pydef(py_func_,
                                         scope(m["name"], c_func_))
                             for (py_func_, c_func_) in m["defines"]])
                  for m in modules]

modules_blocks = [indent(mb) for mb in modules_blocks]

modules_code = "\n\n".join(modules_blocks)

defines = "\n".join([
    "BOOST_PYTHON_MODULE(core){",
    "\tpy::class_<pEntity>(\"pEntity\")",
    "\t    .def(py::init<py::object>())",
    "\t;",
    "",
    "\tpy::class_<pAction>(\"pAction\")",
    "\t    .def(\"__call__\", &pAction::__call__)",
    "\t;",
    "",
    "\tpy::class_<pColor>(\"pColor\");",
    "",
    modules_code,
    "}"
])

header = "\n".join([
    "// DO NOT EDIT THIS FILE",
    "// generated using scripts/generate.hy and code in src/dsl/",
    "",
    "#pragma once",
    "#define PINEAL(_)",
])

code = "\n\n".join([
    header,
    namespace("dsl", join_blocks([bodies, defines]))
])


def main():
    write_file(os.path.join("_src", "dsl_wrapper.h"), code)


if __name__ == "__main__":
    main()
