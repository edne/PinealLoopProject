(defn turn [n rotate-fun]
  (branch-for [i (range n)]
              (rotate-fun (-> i (* 2pi) (/ n)))))


(defn concentric [n]
  (branch-for [i (range 1 n)]
              (scale (-> 1 (/ i) (- (/ 1 n))))))


(defn concentric-lin [n]
  (branch-for [i (range 1 n)]
              (scale (-> 1 (/ n) (* i)))))


(def some-cubes
  (change (cube)
          (scale 0.5)
          (concentric-lin 4)
          (rotate_y (/ pi 4))
          (translate 0.2)
          (turn 4 rotate-y)

          (line-width 4)
          (no-fill)
          (color 0 1 0)))


(def concentric-squares
  (change (polygon 4)
          (concentric 10)
          (line-width 4)
          (no-fill)
          (color 0 1 1)))



(background 0 0 0 1)

(def writing (change (text (str "(pineal)"))
                     (scale 0.1)))


(defn char [c]
  (change (text (str c))
          (scale 0.1)))


(def writing (change (char "")
                     (branch-for [[i c] (enumerate "(pineal)")]
                                 (insert (char c))
                                 (translate (* i 0.05)
                                            0
                                            (-> (time) (* i) (sin) (* 0.5)))
                                 )))


(-> writing
  (change (rotate-y (-> (time 2) (% 2pi) (sin) (* 0.1) (- 0.1)))
          (translate (-> (time 4) (sin) (* 0.2) (+ 0.4)))
          (branch (color 1)
                  (compose (turn 13 rotate-z)
                           (color 1 0.5)))
          (rotate-x -1)
          (scale 0.25)
          )
  draw)

'(-> (seq 2
          [0 some-cubes 1]
          [1 concentric-squares 1]
          )
   draw)
