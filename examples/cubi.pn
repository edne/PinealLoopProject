(defn turn [n rotate-fun]
  (branch-for [i (range n)]
              (rotate-fun (/ i n))))

(defn turn-x [n] (turn n rotate-x))
(defn turn-y [n] (turn n rotate-y))
(defn turn-z [n] (turn n rotate-z))


(defn cubes-zy [z y]
  (-> (cube)
    (change ;(scale (amp 2 1.8))
            (line-width 2)
            (no-fill)
            ;(color (rgb 1 (amp 1 0.05)))
            (line-width 4)
            (turn-z z)
            (turn-y y)
            (rotate-y (lfo-saw time 0.25))
            )))

'(draw (seq 4
            [0 (cubes-zy 64 16) 1]
            [1 (cubes-zy 16 16) 1]
            [2 (cubes-zy 32 16) 1]
            [3 (cubes-zy 12 16) 1]
            ))

(draw (cubes-zy 64 16))
