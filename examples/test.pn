(defn turn [n rotate-fun]
  (branch-for [i (range n)]
              (rotate-fun (-> i (* 2pi) (/ n)))))


(defn concentric [n]
  (branch-for [i (range 1 n)]
              (scale (-> 1 (/ i) (- (/ 1 n))))))


(defn concentric-lin [n]
  (branch-for [i (range 1 n)]
              (scale (-> 1 (/ n) (* i)))))


'(defn beat-test []
   (def some-cubes
     (change (cube)
             (scale 0.5)
             (concentric-lin 4)
             (rotate_y (/ pi 4))
             (translate 0.2)
             (turn 4 rotate-y)

             (line-width 4)
             (no-fill)
             (color (rgb 0 1 0))))

   (def concentric-squares
     (change (polygon 4)
             (concentric 10)
             (line-width 4)
             (no-fill)
             (color (rgb 0 1 1))))

   (-> (seq 2
            [0 some-cubes 1]
            [1 concentric-squares 1]
            )
     draw))


(draw (group (change (cube)
                     (hide)
                     (color (rgb 0.5))
                     (scale 0.5))
             (change (cube)
                     (hide)
                     (branch-for [i (range 3)]
                                 (rotate-y i))
                     (no-fill))))

(draw (change (polygon 3)
              (scale (amp 8))
              (color (rgb 0 1 1 0.2))
              (hide)
              (rotate-y 2)))


(def font "monaco.ttf")
(draw (change (osc-text font "/text")
              (scale 0.1)
              (rotate-y (osc "/time" 2))
              (translate 0 0 (Value 0.5))))


(draw (change (group (change (group (polygon 4)
                                    (cube))
                             (scale 1.5)
                             (line-width 8)
                             (no-fill)
                             )
                     (change (layer "sq")
                             (scale 0.999)
                             (rotate-z 0.1)))
              (on-layer "sq")
              (hide)
              ))

(draw (change (group (change (cube)
                             (line-width 8)
                             (color (rgb (lfo-pwm 0.5 4 0.5 0.5)))
                             (no-fill)
                             (rotate-z (lfo-saw 0.5 2pi))
                             (scale 0.8))

                     (change (cube)
                             (color (rgb 0 1 (lfo-sin 1 0.5 0.5)))
                             (translate (lfo-sin 1 2)
                                        (lfo-sin 1 2 0 0.25))
                             (scale 0.05))

                     (change (layer "layer1")
                             (rotate-x (lfo-saw 4 1 -0.5))
                             (scale 0.4))
                     (change (layer "layer1")
                             (scale 1.2)
                             (rotate-y (lfo-saw 4 1 -0.5))
                             ;(rotate-y (time 10))
                             ))
              (on-layer "layer1" 800)
              ))

(draw (change (layer "layer1")))
