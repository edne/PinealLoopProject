(defn turn [n rotate-fun]
  (branch-for [i (range n)]
              (rotate-fun (-> i (* 2pi) (/ n)))))


(defn concentric [n]
  (branch-for [i (range 1 n)]
              (scale (-> 1 (/ i) (- (/ 1 n))))))


(defn concentric-lin [n]
  (branch-for [i (range 1 n)]
              (scale (-> 1 (/ n) (* i)))))


(background (rgb 0))


'(defn beat-test []
   (def some-cubes
     (change (cube)
             (scale 0.5)
             (concentric-lin 4)
             (rotate_y (/ pi 4))
             (translate 0.2)
             (turn 4 rotate-y)

             (line-width 4)
             (no-fill)
             (color (rgb 0 1 0))))

   (def concentric-squares
     (change (polygon 4)
             (concentric 10)
             (line-width 4)
             (no-fill)
             (color (rgb 0 1 1))))

   (-> (seq 2
            [0 some-cubes 1]
            [1 concentric-squares 1]
            )
     draw))


(defn osc-monitor [path c]
  (draw (change (polygon 30)
                (scale (get-osc-f path 0.0))
                (color c)
                (line-width 4)
                (no-fill)
                )))

(defn monitor [value c]
  (draw (change (polygon 30)
                (scale value)
                (color c)
                (line-width 4)
                (no-fill)
                )))

(osc-monitor "/v1" (rgb 1 0 0))
(monitor (amp) (rgb 0 1 1))
